rule(position [ {registrar}; student = student, departments ] departments, type [ {transcript}; {read})
rule(position [ {csChair}; student = student, departments [ {cs}; {read})
rule(position [ {eeChair}; student = student, departments [ {ee}; {read})
rule(position [ {student}, department [ {cs}; departments ] departments, crs ] crs, type [ {gradebook}; {readScore, addScore})
rule(position [ {student}, department [ {ee}; departments ] departments, crs ] crs, type [ {gradebook}; {readScore, addScore})
rule(position [ {student}, department [ {cs}; departments ] departments, crs ] crs, type [ {gradebook}; {readMyScores})
rule(position [ {student}, department [ {ee}; departments ] departments, crs ] crs, type [ {gradebook}; {readMyScores})
rule(position [ {staff}, department [ {registrar}; departments ] departments, crs ] crs, type [ {roster}; {write, read})
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs, departments ] departments, crs = crs, type [ {roster}; {read})
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs, departments ] departments, crs = crs, type [ {roster}; {read})
rule(position [ {faculty}, department [ {cs}; crsTaught ] crs, departments ] departments, crs = crs, type [ {gradebook}; {readScore, changeScore, assignGrade, addScore})
rule(position [ {faculty}, department [ {ee}; crsTaught ] crs, departments ] departments, crs = crs, type [ {gradebook}; {readScore, changeScore, assignGrade, addScore})
rule(position [ {staff}, department [ {admissions}; student = student, type [ {application}; {read, setStatus})
rule(position [ {student, applicant}; student = student, type [ {application}; {checkStatus})
