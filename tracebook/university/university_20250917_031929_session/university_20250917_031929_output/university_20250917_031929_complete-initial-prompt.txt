**READ THE ENTIRE REQUEST BEFORE GENERATING ANYTHING**

The following text is a request to fix ABAC rules. The text is separated into sections. To begin the text will name the section and the purpose of the section in this request.

	PROMPT section:  This will be the main request we need accomplished through the query.

    ATTRIBUTE_DESCRIPTION section: is a sample policy for a healthcare organization.
     Analyze this file to better understand ABAC rule attributes for our organization. Also use this section to better understand the ATTRIBUTE_DATA section    

    ATTRIBUTE_DATA_FORMAT_DESCRIPTION: This section explains the format of the ATTRIBUTE DATA described in the attribute data section.

    ATTRIBUTE_DATA section: is the attribute data for our organization. This includes resources and users. Use these to create the ABAC rules being requested. 

    RULES_FORMAT_DESCRIPTION: This section explains the format of the ABAC rules that we need you (the LLM) to generate.

    GROUND_TRUTH_ACL section: This section contains our organizations entire ACL (access Control List), this is the list that needs to be converted into a set of
     ABAC rules that grant the exact same permissions. 
     this is also known as the ground truth ACL.

	ADDITIONAL_INSTRUCTIONS section: contains additional instructions you need to follow. instructions that have to do with output results,
     the process, and other rules to help you (the LLM model) generate the exact results needed.


## PROMPT ##
    Our organization needs you (the LLM) to use the 
    ATTRIBUTE_DESCRIPTION , ATTRIBUTE_DATA_FORMAT_DESCRIPTION, ATTRIBUTE_DATA, RULES_FORMAT_DESCRIPTION, and ADDITIONAL_INSTRUCTIONS sections
    to generate a set of ABAC Rules that will give the same exact permissions that the GROUND_TRUTH_ACL gives. No less permission and no more permissions
    than what is in the GROUND_TRUTH_ACL.
        THE GOAL IS TO CREATE A SET OF ABAC RULES THAT WILL GENERATE THE SAME SET OF PERMISSIONS THAT THE ACL IN THE GROUND_TRUTH_ACL section,
        ANY PERMISSION THAT IS MISSED, BY YOUR GENERATED ABAC RULES, OR THAT IS OVER PEMRITTED BY YOUR ABAC RULE SET WILL BE CONSIDERED A FAILURE.
            This is mission critical so accuracy is critical.
    You (the LLM) must generate the fewest amount of rules that give the same exact permissions as the ACL that was provided.


## ATTRIBUTE_DESCRIPTION ##
# Policy Description: University 
*Vesion: v20250308*


This is a sample policy developed by Xu et al. (2015). The policy manages access to university resources for students, instructors, teaching assistants (TAs), department chairs, and staff in the registrar’s and admissions offices. It defines access rules for applications (for admission), gradebooks, transcripts, and course schedules.

**Reference**: Zhongyuan Xu and Scott D. Stoller. *Mining attribute-based access control policies.* IEEE Transactions on Dependable and Secure Computing, 12(5):533–545, September–October 2015.

## Attributes

### Subject/User Attributes
The subjects of this policy include faculty, staff, students, and applicants within the university system. The following attributes are used to describe the subjects.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| uid          | Single, String   | User’s unique identifier.                                  | csStu1, csFac1, etc.                         |
| position          | Single, String   | The user's position.        | applicant, student, faculty, staff.             |
| department        | Single, String   | The user's main department, for faculty and staff.                     | cs, ee, registrar, etc.                      |
| crsTaken         | Multi, Set\<String>   | Set of courses taken by a student.             | {cs101, ee602}, etc. |
| crsTaught    | Multi, Set\<String>   | Set of courses for which the user is the instructor ( faculty) or TA (for students) | {cs101, ee602}, etc.                          |
| isChair    | Single, Boolean   | Specifying if a faculty is the chair of their department.                     | True, False  |


### Resource Attributes
The resources of this policy include applications, gradebooks, rosters, and transcripts within the university system. The following attributes are used to describe the resources.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| rid      | Single, String   | Resource’s unique identifier                             | cs101roster, ee602gradebook, etc.               |
| type             | Single, String   | Type of resource being accessed.                        | application, gradebook, roster, transcript                       |
| crs       | Single, String   | The course associated with the gradebook or roster                 | cs101, ee602                            |
| student          | Single, String   | The student associated with the transcript or application.                      | csStu1, eeStu3, etc.                           |
| departments      | Multi, Set\<String>   | The department the course is in (for gradebook and roster), and the student’s major department(s) (for transcript).            | {cs, ee}, etc.                            |


## ATTRIBUTE_DATA_FORMAT_DESCRIPTION ##

    This section outlines the format of attribute data described in the ATTRIBUTE DATA section. 

   ATTRIBUTE_DATA section contains lines of the forms:

    userAttrib(uid, attribute1=value1, attribute2=value2, ...)

    resourceAttrib(rid, attribute1=value1, attribute2=value2, ...)
    

    The `userAttrib` and `resourceAttrib` lines define the users (subjects) and resources in the policy, respectively.
    - The first argument of a `userAttrib` is automatically assigned to an attribute named `uid`, which is the id of the user. 
    The first argument of a `resourceAttrib` is automatically assigned to an attribute named `rid`, which is the id of the resource.  
    - `value1`, `value2`, ... are atomic values or sets of atomic values.
    - An atomic value is a string that starts with a character other than a left curly brace.  
    - A set has the form `{element1 element2 ...}`. **Note that elements of a set are separated by spaces, not commas.**

## ATTRIBUTE_DATA ##
# ABAC policy for a university.

# Note that the two words "user" and "subject" are used interchangeably in this document.

# Please refer to the policy description document for the detailed descriptions subject attributes and resource attributes. Note that some attributes might be irrelevant for some users and resources.

#------------------------------------------------------------
# user attribute data
#------------------------------------------------------------

# applicants for admission to the university

userAttrib(applicant1, position=applicant)
userAttrib(applicant2, position=applicant)

# students

userAttrib(csStu1, position=student, department=cs, crsTaken={cs101})
userAttrib(csStu2, position=student, department=cs, crsTaken={cs601}, crsTaught={cs101 cs602})
userAttrib(csStu3, position=student, department=cs, crsTaken={cs602}, crsTaught={cs601})
userAttrib(csStu4, position=student, department=cs, crsTaken={cs601})
userAttrib(csStu5, position=student, department=cs, crsTaken={cs601 cs602})

userAttrib(eeStu1, position=student, department=ee, crsTaken={ee101})
userAttrib(eeStu2, position=student, department=ee, crsTaken={ee601}, crsTaught={ee101 ee602})
userAttrib(eeStu3, position=student, department=ee, crsTaken={ee602}, crsTaught={ee601})
userAttrib(eeStu4, position=student, department=ee, crsTaken={ee601})
userAttrib(eeStu5, position=student, department=ee, crsTaken={ee601 ee602})

# faculty

userAttrib(csFac1, position=faculty, department=cs, crsTaught={cs101})
userAttrib(csFac2, position=faculty, department=cs, crsTaught={cs601})
userAttrib(csChair, isChair=True, department=cs)

userAttrib(eeFac1, position=faculty, department=ee, crsTaught={ee101})
userAttrib(eeFac2, position=faculty, department=ee, crsTaught={ee601})
userAttrib(eeChair, isChair=True, department=ee)

# staff

userAttrib(registrar1, position=staff, department=registrar)
userAttrib(registrar2, position=staff, department=registrar)

userAttrib(admissions1, position=staff, department=admissions)
userAttrib(admissions2, position=staff, department=admissions)

#------------------------------------------------------------
# resource attribute data
#------------------------------------------------------------

# applications.  applications exist for applicants and students (accepted
# applicants).

resourceAttrib(application1, type=application, student=applicant1)
resourceAttrib(application2, type=application, student=applicant2)

resourceAttrib(csStu1application, type=application, student=csStu1)
resourceAttrib(csStu2application, type=application, student=csStu2)
resourceAttrib(csStu3application, type=application, student=csStu3)
resourceAttrib(csStu4application, type=application, student=csStu4)
resourceAttrib(csStu5application, type=application, student=csStu5)

resourceAttrib(eeStu1application, type=application, student=eeStu1)
resourceAttrib(eeStu2application, type=application, student=eeStu2)
resourceAttrib(eeStu3application, type=application, student=eeStu3)
resourceAttrib(eeStu4application, type=application, student=eeStu4)
resourceAttrib(eeStu5application, type=application, student=eeStu5)

# gradebooks

resourceAttrib(cs101gradebook, departments={cs}, crs=cs101, type=gradebook)
resourceAttrib(cs601gradebook, departments={cs}, crs=cs601, type=gradebook)
resourceAttrib(cs602gradebook, departments={cs}, crs=cs602, type=gradebook)

resourceAttrib(ee101gradebook, departments={ee}, crs=ee101, type=gradebook)
resourceAttrib(ee601gradebook, departments={ee}, crs=ee601, type=gradebook)
resourceAttrib(ee602gradebook, departments={ee}, crs=ee602, type=gradebook)

# rosters

resourceAttrib(cs101roster, departments={cs}, crs=cs101, type=roster)
resourceAttrib(cs601roster, departments={cs}, crs=cs601, type=roster)
resourceAttrib(cs602roster, departments={cs}, crs=cs602, type=roster)

resourceAttrib(ee101roster, departments={ee}, crs=ee101, type=roster)
resourceAttrib(ee601roster, departments={ee}, crs=ee601, type=roster)
resourceAttrib(ee602roster, departments={ee}, crs=ee602, type=roster)

# transcripts

resourceAttrib(csStu1trans, student=csStu1, departments={cs}, type=transcript)
resourceAttrib(csStu2trans, student=csStu2, departments={cs}, type=transcript)
resourceAttrib(csStu3trans, student=csStu3, departments={cs}, type=transcript)
resourceAttrib(csStu4trans, student=csStu4, departments={cs}, type=transcript)
resourceAttrib(csStu5trans, student=csStu5, departments={cs}, type=transcript)

resourceAttrib(eeStu1trans, student=eeStu1, departments={ee}, type=transcript)
resourceAttrib(eeStu2trans, student=eeStu2, departments={ee}, type=transcript)
resourceAttrib(eeStu3trans, student=eeStu3, departments={ee}, type=transcript)
resourceAttrib(eeStu4trans, student=eeStu4, departments={ee}, type=transcript)
resourceAttrib(eeStu5trans, student=eeStu5, departments={ee}, type=transcript)


## RULES_FORMAT_DESCRIPTION ##
    All of the output ABAC rules must follow the following format:
        rule(subCond; resCond; acts; cons)
    
    - `subCond` is a subject condition. It is a conjunction, with the conjuncts separated by commas. Each conjunct has the form 
    `attr [ {value1 value2 ...}`, where `attr` is a single-valued user attribute and `[` denotes the "in" 
    operator (note that elements of a set are separated by spaces, not commas), or 
    `attr ] value`
    , where attr is a muli-valued attribute, value is an atomic value, and `]` denotes the "contains" operator.

    - `resCond` is a resource condition. The syntax is analogous to the syntax for subject condition.

    - `acts` is a set of actions.

    - `cons` is a constraint. It is a conjunction of atomic constraints, with the
    conjuncts separated by commas. An atomic constraint is a formula of one of the following forms:
    
    aum > arm 
    aus [ arm
    aum ] ars
    aus = ars
    
    , where `aus` is a single-valued user attribute,
    `aum` is a multi-valued user attribute,
    `ars` is a single-valued resource attribute,
    `arm` is a multi-valued resource attribute. Note that `>` denotes the "supseteq" (⊇) operator.

    This is an example of a rule:
        rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)


## GROUND_TRUTH_ACL ##
registrar2, csStu1trans, read
registrar1, eeStu4trans, read
csStu2, cs602gradebook, readScore
csChair, csStu2trans, read
csStu2, csStu2trans, read
registrar1, cs101roster, write
csStu4, csStu4trans, read
registrar1, eeStu5trans, read
admissions1, eeStu3application, setStatus
eeFac1, ee101gradebook, readScore
admissions1, application1, read
registrar2, ee101roster, write
csFac1, cs101roster, read
csStu1, csStu1application, checkStatus
registrar2, cs602roster, read
admissions2, eeStu3application, setStatus
admissions2, eeStu5application, setStatus
registrar1, ee101roster, write
csStu3, cs601gradebook, readScore
registrar1, eeStu1trans, read
registrar2, eeStu1trans, read
admissions2, csStu4application, read
admissions2, eeStu1application, setStatus
registrar2, eeStu5trans, read
admissions1, eeStu4application, read
csStu5, cs601gradebook, readMyScores
csStu5, csStu5application, checkStatus
eeStu5, eeStu5trans, read
eeChair, eeStu1trans, read
registrar1, csStu3trans, read
csFac1, cs101gradebook, addScore
registrar2, csStu3trans, read
csStu3, csStu3application, checkStatus
eeStu2, ee101gradebook, addScore
eeStu2, ee602gradebook, addScore
registrar2, eeStu4trans, read
eeStu4, eeStu4application, checkStatus
eeChair, eeStu2trans, read
applicant1, application1, checkStatus
eeFac2, ee601roster, read
admissions1, csStu2application, read
registrar2, csStu4trans, read
eeFac2, ee601gradebook, readScore
registrar2, ee601roster, read
registrar2, cs602roster, write
admissions1, application2, read
registrar2, eeStu2trans, read
admissions1, application2, setStatus
csChair, csStu1trans, read
admissions1, eeStu1application, setStatus
admissions1, application1, setStatus
registrar1, csStu2trans, read
admissions1, eeStu2application, setStatus
admissions1, csStu5application, read
admissions2, csStu1application, read
csStu3, cs601gradebook, addScore
eeStu2, ee602gradebook, readScore
csStu3, cs602gradebook, readMyScores
eeFac1, ee101gradebook, assignGrade
registrar1, csStu4trans, read
admissions2, csStu2application, read
csFac2, cs601gradebook, readScore
registrar1, cs602roster, write
csFac2, cs601roster, read
registrar1, csStu5trans, read
csChair, csStu3trans, read
admissions2, csStu4application, setStatus
registrar1, eeStu3trans, read
registrar2, eeStu3trans, read
eeStu5, ee602gradebook, readMyScores
admissions2, csStu3application, setStatus
csFac1, cs101gradebook, changeScore
eeChair, eeStu5trans, read
registrar1, ee602roster, read
eeChair, eeStu4trans, read
registrar1, csStu1trans, read
registrar1, cs101roster, read
admissions2, csStu5application, read
eeStu2, eeStu2trans, read
admissions2, csStu5application, setStatus
registrar2, cs601roster, read
admissions2, eeStu1application, read
admissions1, csStu3application, setStatus
admissions1, eeStu4application, setStatus
csStu2, cs601gradebook, readMyScores
admissions1, eeStu1application, read
eeStu5, eeStu5application, checkStatus
admissions1, csStu1application, read
eeStu2, ee601gradebook, readMyScores
admissions2, eeStu3application, read
eeStu1, eeStu1application, checkStatus
admissions2, eeStu4application, read
registrar2, ee602roster, read
admissions2, eeStu2application, read
admissions2, csStu1application, setStatus
admissions2, eeStu5application, read
registrar1, ee601roster, write
registrar2, cs101roster, write
eeStu3, ee601gradebook, addScore
csStu3, csStu3trans, read
eeChair, eeStu3trans, read
csStu4, csStu4application, checkStatus
csFac1, cs101gradebook, assignGrade
admissions1, csStu5application, setStatus
eeStu4, eeStu4trans, read
eeStu2, ee101gradebook, readScore
registrar1, eeStu2trans, read
admissions1, eeStu2application, read
csStu4, cs601gradebook, readMyScores
admissions1, csStu1application, setStatus
eeFac1, ee101roster, read
eeFac2, ee601gradebook, changeScore
registrar1, ee101roster, read
admissions2, application2, setStatus
eeStu3, ee601gradebook, readScore
admissions2, csStu2application, setStatus
registrar1, cs601roster, write
admissions2, csStu3application, read
csFac2, cs601gradebook, changeScore
csStu2, csStu2application, checkStatus
registrar1, cs602roster, read
registrar1, ee602roster, write
eeStu5, ee601gradebook, readMyScores
csFac2, cs601gradebook, assignGrade
registrar1, cs601roster, read
eeStu1, eeStu1trans, read
registrar1, ee601roster, read
registrar2, cs601roster, write
admissions2, application1, read
admissions2, application1, setStatus
admissions2, eeStu4application, setStatus
eeStu3, ee602gradebook, readMyScores
registrar2, ee101roster, read
csChair, csStu4trans, read
registrar2, csStu5trans, read
admissions1, csStu4application, read
applicant2, application2, checkStatus
eeStu2, eeStu2application, checkStatus
csStu5, cs602gradebook, readMyScores
admissions2, application2, read
registrar2, ee601roster, write
eeFac1, ee101gradebook, addScore
admissions1, csStu2application, setStatus
eeFac2, ee601gradebook, assignGrade
eeFac1, ee101gradebook, changeScore
csStu2, cs602gradebook, addScore
admissions1, eeStu5application, setStatus
csFac1, cs101gradebook, readScore
eeStu3, eeStu3trans, read
admissions1, csStu3application, read
registrar2, cs101roster, read
eeStu1, ee101gradebook, readMyScores
eeFac2, ee601gradebook, addScore
eeStu3, eeStu3application, checkStatus
csStu2, cs101gradebook, readScore
csFac2, cs601gradebook, addScore
admissions1, csStu4application, setStatus
admissions1, eeStu3application, read
csStu5, csStu5trans, read
csChair, csStu5trans, read
csStu1, cs101gradebook, readMyScores
admissions2, eeStu2application, setStatus
eeStu4, ee601gradebook, readMyScores
admissions1, eeStu5application, read
registrar2, ee602roster, write
registrar2, csStu2trans, read
csStu2, cs101gradebook, addScore
csStu1, csStu1trans, read

## ADDITIONAL_INSTRUCTIONS

        This section provides additional instructions to assist you output propper ABAC rules.

        This is also divided into sections, the following is a description on the sections. 
        Failure to adhere to any of these rules will result in a failed query on your (the LLM) part.

            OUTPUT_FORMAT section: The output section describes how to format your (the LLMs) response. Including syntax, restrictions, and content. 
            
            ABAC_RULES section, is section dedicated to helping you (the LLM) produce more consistent and correct abac rules. You (the LLM) are to follow these rules strictly.

            The LLM_IMPROVEMENT section, has other instructions to help you (the LLM) produce better results.



        OUTPUT_FORMAT:
            1. Only respond with the ABAC rules being requested.
            2. Each rule should follow strict syntax described in the RULES_FORMAT_DESCRIPTION section.
            3. Each rule should be in its own line.
                    verify for each line:
                    line.startswith("rule(") and line.endswith(")")
                    line.count(";") == 3                
            4. Respond only with plain text, no mark-up or other type of formatting. 
                a. unseen values are forbidden.
            9. DO NOT INCLUDE ANY ``` at the beginnig or end of a response
         


        ABAC_RULES:
            
            1. ABAC rules should avoid using uid and rid attributes. 
                a. Do not hard code any ids, the rules should be dynamic.
            2. The generated rules must as concise as possible.
                a. Check all ABAC rules for redundancy, keep rules to strict minimum. 
                b. Consider removing any conjuncts in subject condition, resource condition, and constraints if that does not affect the permission given by the rule.
            6. You (the LLM) are allowed to combine rules for actions if they should grant the same access. 
                a. For example: rule (; subj ] {math}; {read, write, createNote}; class=class )
            7. ABAC rules do not need to dictate permit or deny as a section.
                a. INCORRECT = rule (; subj ] {math}; {read}; class=class, PERMIT )
            8. DO NOT ADD, REMOVE, OR EDIT ATTRIBUTES.
            9. Do not use synonyms when describing actions, stick to the action on the ACL list ONLY.


     






**READ THE ENTIRE REQUEST BEFORE GENERATING ANYTHING**

The following text is a request to fix ABAC rules. The text is separated into sections. To begin the text will name the section and the purpose of the section in this request.

	PROMPT section:  This will be the main request we need accomplished through the query.

    ATTRIBUTE_DESCRIPTION section: is a sample policy for a healthcare organization.
     Analyze this file to better understand ABAC rule attributes for our organization. Also use this section to better understand the ATTRIBUTE_DATA section    

    ATTRIBUTE_DATA_FORMAT_DESCRIPTION: This section explains the format of the ATTRIBUTE DATA described in the attribute data section.

    ATTRIBUTE_DATA section: is the attribute data for our organization. This includes resources and users. Use these to create the ABAC rules being requested. 

    RULES_FORMAT_DESCRIPTION: This section explains the format of the ABAC rules that we need you (the LLM) to generate.

    GROUND_TRUTH_ACL section: This section contains our organizations entire ACL (access Control List), this is the list that needs to be converted into a set of
     ABAC rules that grant the exact same permissions. 
     this is also known as the ground truth ACL.

	ADDITIONAL_INSTRUCTIONS section: contains additional instructions you need to follow. instructions that have to do with output results,
     the process, and other rules to help you (the LLM model) generate the exact results needed.


## PROMPT ##
    Our organization needs you (the LLM) to use the 
    ATTRIBUTE_DESCRIPTION , ATTRIBUTE_DATA_FORMAT_DESCRIPTION, ATTRIBUTE_DATA, RULES_FORMAT_DESCRIPTION, and ADDITIONAL_INSTRUCTIONS sections
    to generate a set of ABAC Rules that will give the same exact permissions that the GROUND_TRUTH_ACL gives. No less permission and no more permissions
    than what is in the GROUND_TRUTH_ACL.
        THE GOAL IS TO CREATE A SET OF ABAC RULES THAT WILL GENERATE THE SAME SET OF PERMISSIONS THAT THE ACL IN THE GROUND_TRUTH_ACL section,
        ANY PERMISSION THAT IS MISSED, BY YOUR GENERATED ABAC RULES, OR THAT IS OVER PEMRITTED BY YOUR ABAC RULE SET WILL BE CONSIDERED A FAILURE.
            This is mission critical so accuracy is critical.
    You (the LLM) must generate the fewest amount of rules that give the same exact permissions as the ACL that was provided.


## ATTRIBUTE_DESCRIPTION ##
# Policy Description: University 
*Vesion: v20250308*


This is a sample policy developed by Xu et al. (2015). The policy manages access to university resources for students, instructors, teaching assistants (TAs), department chairs, and staff in the registrar’s and admissions offices. It defines access rules for applications (for admission), gradebooks, transcripts, and course schedules.

**Reference**: Zhongyuan Xu and Scott D. Stoller. *Mining attribute-based access control policies.* IEEE Transactions on Dependable and Secure Computing, 12(5):533–545, September–October 2015.

## Attributes

### Subject/User Attributes
The subjects of this policy include faculty, staff, students, and applicants within the university system. The following attributes are used to describe the subjects.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| uid          | Single, String   | User’s unique identifier.                                  | csStu1, csFac1, etc.                         |
| position          | Single, String   | The user's position.        | applicant, student, faculty, staff.             |
| department        | Single, String   | The user's main department, for faculty and staff.                     | cs, ee, registrar, etc.                      |
| crsTaken         | Multi, Set\<String>   | Set of courses taken by a student.             | {cs101, ee602}, etc. |
| crsTaught    | Multi, Set\<String>   | Set of courses for which the user is the instructor ( faculty) or TA (for students) | {cs101, ee602}, etc.                          |
| isChair    | Single, Boolean   | Specifying if a faculty is the chair of their department.                     | True, False  |


### Resource Attributes
The resources of this policy include applications, gradebooks, rosters, and transcripts within the university system. The following attributes are used to describe the resources.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| rid      | Single, String   | Resource’s unique identifier                             | cs101roster, ee602gradebook, etc.               |
| type             | Single, String   | Type of resource being accessed.                        | application, gradebook, roster, transcript                       |
| crs       | Single, String   | The course associated with the gradebook or roster                 | cs101, ee602                            |
| student          | Single, String   | The student associated with the transcript or application.                      | csStu1, eeStu3, etc.                           |
| departments      | Multi, Set\<String>   | The department the course is in (for gradebook and roster), and the student’s major department(s) (for transcript).            | {cs, ee}, etc.                            |


## ATTRIBUTE_DATA_FORMAT_DESCRIPTION ##

    This section outlines the format of attribute data described in the ATTRIBUTE DATA section. 

   ATTRIBUTE_DATA section contains lines of the forms:

    userAttrib(uid, attribute1=value1, attribute2=value2, ...)

    resourceAttrib(rid, attribute1=value1, attribute2=value2, ...)
    

    The `userAttrib` and `resourceAttrib` lines define the users (subjects) and resources in the policy, respectively.
    - The first argument of a `userAttrib` is automatically assigned to an attribute named `uid`, which is the id of the user. 
    The first argument of a `resourceAttrib` is automatically assigned to an attribute named `rid`, which is the id of the resource.  
    - `value1`, `value2`, ... are atomic values or sets of atomic values.
    - An atomic value is a string that starts with a character other than a left curly brace.  
    - A set has the form `{element1 element2 ...}`. **Note that elements of a set are separated by spaces, not commas.**

## ATTRIBUTE_DATA ##
# ABAC policy for a university.

# Note that the two words "user" and "subject" are used interchangeably in this document.

# Please refer to the policy description document for the detailed descriptions subject attributes and resource attributes. Note that some attributes might be irrelevant for some users and resources.

#------------------------------------------------------------
# user attribute data
#------------------------------------------------------------

# applicants for admission to the university

userAttrib(applicant1, position=applicant)
userAttrib(applicant2, position=applicant)

# students

userAttrib(csStu1, position=student, department=cs, crsTaken={cs101})
userAttrib(csStu2, position=student, department=cs, crsTaken={cs601}, crsTaught={cs101 cs602})
userAttrib(csStu3, position=student, department=cs, crsTaken={cs602}, crsTaught={cs601})
userAttrib(csStu4, position=student, department=cs, crsTaken={cs601})
userAttrib(csStu5, position=student, department=cs, crsTaken={cs601 cs602})

userAttrib(eeStu1, position=student, department=ee, crsTaken={ee101})
userAttrib(eeStu2, position=student, department=ee, crsTaken={ee601}, crsTaught={ee101 ee602})
userAttrib(eeStu3, position=student, department=ee, crsTaken={ee602}, crsTaught={ee601})
userAttrib(eeStu4, position=student, department=ee, crsTaken={ee601})
userAttrib(eeStu5, position=student, department=ee, crsTaken={ee601 ee602})

# faculty

userAttrib(csFac1, position=faculty, department=cs, crsTaught={cs101})
userAttrib(csFac2, position=faculty, department=cs, crsTaught={cs601})
userAttrib(csChair, isChair=True, department=cs)

userAttrib(eeFac1, position=faculty, department=ee, crsTaught={ee101})
userAttrib(eeFac2, position=faculty, department=ee, crsTaught={ee601})
userAttrib(eeChair, isChair=True, department=ee)

# staff

userAttrib(registrar1, position=staff, department=registrar)
userAttrib(registrar2, position=staff, department=registrar)

userAttrib(admissions1, position=staff, department=admissions)
userAttrib(admissions2, position=staff, department=admissions)

#------------------------------------------------------------
# resource attribute data
#------------------------------------------------------------

# applications.  applications exist for applicants and students (accepted
# applicants).

resourceAttrib(application1, type=application, student=applicant1)
resourceAttrib(application2, type=application, student=applicant2)

resourceAttrib(csStu1application, type=application, student=csStu1)
resourceAttrib(csStu2application, type=application, student=csStu2)
resourceAttrib(csStu3application, type=application, student=csStu3)
resourceAttrib(csStu4application, type=application, student=csStu4)
resourceAttrib(csStu5application, type=application, student=csStu5)

resourceAttrib(eeStu1application, type=application, student=eeStu1)
resourceAttrib(eeStu2application, type=application, student=eeStu2)
resourceAttrib(eeStu3application, type=application, student=eeStu3)
resourceAttrib(eeStu4application, type=application, student=eeStu4)
resourceAttrib(eeStu5application, type=application, student=eeStu5)

# gradebooks

resourceAttrib(cs101gradebook, departments={cs}, crs=cs101, type=gradebook)
resourceAttrib(cs601gradebook, departments={cs}, crs=cs601, type=gradebook)
resourceAttrib(cs602gradebook, departments={cs}, crs=cs602, type=gradebook)

resourceAttrib(ee101gradebook, departments={ee}, crs=ee101, type=gradebook)
resourceAttrib(ee601gradebook, departments={ee}, crs=ee601, type=gradebook)
resourceAttrib(ee602gradebook, departments={ee}, crs=ee602, type=gradebook)

# rosters

resourceAttrib(cs101roster, departments={cs}, crs=cs101, type=roster)
resourceAttrib(cs601roster, departments={cs}, crs=cs601, type=roster)
resourceAttrib(cs602roster, departments={cs}, crs=cs602, type=roster)

resourceAttrib(ee101roster, departments={ee}, crs=ee101, type=roster)
resourceAttrib(ee601roster, departments={ee}, crs=ee601, type=roster)
resourceAttrib(ee602roster, departments={ee}, crs=ee602, type=roster)

# transcripts

resourceAttrib(csStu1trans, student=csStu1, departments={cs}, type=transcript)
resourceAttrib(csStu2trans, student=csStu2, departments={cs}, type=transcript)
resourceAttrib(csStu3trans, student=csStu3, departments={cs}, type=transcript)
resourceAttrib(csStu4trans, student=csStu4, departments={cs}, type=transcript)
resourceAttrib(csStu5trans, student=csStu5, departments={cs}, type=transcript)

resourceAttrib(eeStu1trans, student=eeStu1, departments={ee}, type=transcript)
resourceAttrib(eeStu2trans, student=eeStu2, departments={ee}, type=transcript)
resourceAttrib(eeStu3trans, student=eeStu3, departments={ee}, type=transcript)
resourceAttrib(eeStu4trans, student=eeStu4, departments={ee}, type=transcript)
resourceAttrib(eeStu5trans, student=eeStu5, departments={ee}, type=transcript)


## RULES_FORMAT_DESCRIPTION ##
    All of the output ABAC rules must follow the following format:
        rule(subCond; resCond; acts; cons)
    
    - `subCond` is a subject condition. It is a conjunction, with the conjuncts separated by commas. Each conjunct has the form 
    `attr [ {value1 value2 ...}`, where `attr` is a single-valued user attribute and `[` denotes the "in" 
    operator (note that elements of a set are separated by spaces, not commas), or 
    `attr ] value`
    , where attr is a muli-valued attribute, value is an atomic value, and `]` denotes the "contains" operator.

    - `resCond` is a resource condition. The syntax is analogous to the syntax for subject condition.

    - `acts` is a set of actions.

    - `cons` is a constraint. It is a conjunction of atomic constraints, with the
    conjuncts separated by commas. An atomic constraint is a formula of one of the following forms:
    
    aum > arm 
    aus [ arm
    aum ] ars
    aus = ars
    
    , where `aus` is a single-valued user attribute,
    `aum` is a multi-valued user attribute,
    `ars` is a single-valued resource attribute,
    `arm` is a multi-valued resource attribute. Note that `>` denotes the "supseteq" (⊇) operator.

    This is an example of a rule:
        rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)


## GROUND_TRUTH_ACL ##
registrar2, csStu1trans, read
registrar1, eeStu4trans, read
csStu2, cs602gradebook, readScore
csChair, csStu2trans, read
csStu2, csStu2trans, read
registrar1, cs101roster, write
csStu4, csStu4trans, read
registrar1, eeStu5trans, read
admissions1, eeStu3application, setStatus
eeFac1, ee101gradebook, readScore
admissions1, application1, read
registrar2, ee101roster, write
csFac1, cs101roster, read
csStu1, csStu1application, checkStatus
registrar2, cs602roster, read
admissions2, eeStu3application, setStatus
admissions2, eeStu5application, setStatus
registrar1, ee101roster, write
csStu3, cs601gradebook, readScore
registrar1, eeStu1trans, read
registrar2, eeStu1trans, read
admissions2, csStu4application, read
admissions2, eeStu1application, setStatus
registrar2, eeStu5trans, read
admissions1, eeStu4application, read
csStu5, cs601gradebook, readMyScores
csStu5, csStu5application, checkStatus
eeStu5, eeStu5trans, read
eeChair, eeStu1trans, read
registrar1, csStu3trans, read
csFac1, cs101gradebook, addScore
registrar2, csStu3trans, read
csStu3, csStu3application, checkStatus
eeStu2, ee101gradebook, addScore
eeStu2, ee602gradebook, addScore
registrar2, eeStu4trans, read
eeStu4, eeStu4application, checkStatus
eeChair, eeStu2trans, read
applicant1, application1, checkStatus
eeFac2, ee601roster, read
admissions1, csStu2application, read
registrar2, csStu4trans, read
eeFac2, ee601gradebook, readScore
registrar2, ee601roster, read
registrar2, cs602roster, write
admissions1, application2, read
registrar2, eeStu2trans, read
admissions1, application2, setStatus
csChair, csStu1trans, read
admissions1, eeStu1application, setStatus
admissions1, application1, setStatus
registrar1, csStu2trans, read
admissions1, eeStu2application, setStatus
admissions1, csStu5application, read
admissions2, csStu1application, read
csStu3, cs601gradebook, addScore
eeStu2, ee602gradebook, readScore
csStu3, cs602gradebook, readMyScores
eeFac1, ee101gradebook, assignGrade
registrar1, csStu4trans, read
admissions2, csStu2application, read
csFac2, cs601gradebook, readScore
registrar1, cs602roster, write
csFac2, cs601roster, read
registrar1, csStu5trans, read
csChair, csStu3trans, read
admissions2, csStu4application, setStatus
registrar1, eeStu3trans, read
registrar2, eeStu3trans, read
eeStu5, ee602gradebook, readMyScores
admissions2, csStu3application, setStatus
csFac1, cs101gradebook, changeScore
eeChair, eeStu5trans, read
registrar1, ee602roster, read
eeChair, eeStu4trans, read
registrar1, csStu1trans, read
registrar1, cs101roster, read
admissions2, csStu5application, read
eeStu2, eeStu2trans, read
admissions2, csStu5application, setStatus
registrar2, cs601roster, read
admissions2, eeStu1application, read
admissions1, csStu3application, setStatus
admissions1, eeStu4application, setStatus
csStu2, cs601gradebook, readMyScores
admissions1, eeStu1application, read
eeStu5, eeStu5application, checkStatus
admissions1, csStu1application, read
eeStu2, ee601gradebook, readMyScores
admissions2, eeStu3application, read
eeStu1, eeStu1application, checkStatus
admissions2, eeStu4application, read
registrar2, ee602roster, read
admissions2, eeStu2application, read
admissions2, csStu1application, setStatus
admissions2, eeStu5application, read
registrar1, ee601roster, write
registrar2, cs101roster, write
eeStu3, ee601gradebook, addScore
csStu3, csStu3trans, read
eeChair, eeStu3trans, read
csStu4, csStu4application, checkStatus
csFac1, cs101gradebook, assignGrade
admissions1, csStu5application, setStatus
eeStu4, eeStu4trans, read
eeStu2, ee101gradebook, readScore
registrar1, eeStu2trans, read
admissions1, eeStu2application, read
csStu4, cs601gradebook, readMyScores
admissions1, csStu1application, setStatus
eeFac1, ee101roster, read
eeFac2, ee601gradebook, changeScore
registrar1, ee101roster, read
admissions2, application2, setStatus
eeStu3, ee601gradebook, readScore
admissions2, csStu2application, setStatus
registrar1, cs601roster, write
admissions2, csStu3application, read
csFac2, cs601gradebook, changeScore
csStu2, csStu2application, checkStatus
registrar1, cs602roster, read
registrar1, ee602roster, write
eeStu5, ee601gradebook, readMyScores
csFac2, cs601gradebook, assignGrade
registrar1, cs601roster, read
eeStu1, eeStu1trans, read
registrar1, ee601roster, read
registrar2, cs601roster, write
admissions2, application1, read
admissions2, application1, setStatus
admissions2, eeStu4application, setStatus
eeStu3, ee602gradebook, readMyScores
registrar2, ee101roster, read
csChair, csStu4trans, read
registrar2, csStu5trans, read
admissions1, csStu4application, read
applicant2, application2, checkStatus
eeStu2, eeStu2application, checkStatus
csStu5, cs602gradebook, readMyScores
admissions2, application2, read
registrar2, ee601roster, write
eeFac1, ee101gradebook, addScore
admissions1, csStu2application, setStatus
eeFac2, ee601gradebook, assignGrade
eeFac1, ee101gradebook, changeScore
csStu2, cs602gradebook, addScore
admissions1, eeStu5application, setStatus
csFac1, cs101gradebook, readScore
eeStu3, eeStu3trans, read
admissions1, csStu3application, read
registrar2, cs101roster, read
eeStu1, ee101gradebook, readMyScores
eeFac2, ee601gradebook, addScore
eeStu3, eeStu3application, checkStatus
csStu2, cs101gradebook, readScore
csFac2, cs601gradebook, addScore
admissions1, csStu4application, setStatus
admissions1, eeStu3application, read
csStu5, csStu5trans, read
csChair, csStu5trans, read
csStu1, cs101gradebook, readMyScores
admissions2, eeStu2application, setStatus
eeStu4, ee601gradebook, readMyScores
admissions1, eeStu5application, read
registrar2, ee602roster, write
registrar2, csStu2trans, read
csStu2, cs101gradebook, addScore
csStu1, csStu1trans, read

## ADDITIONAL_INSTRUCTIONS

        This section provides additional instructions to assist you output propper ABAC rules.

        This is also divided into sections, the following is a description on the sections. 
        Failure to adhere to any of these rules will result in a failed query on your (the LLM) part.

            OUTPUT_FORMAT section: The output section describes how to format your (the LLMs) response. Including syntax, restrictions, and content. 
            
            ABAC_RULES section, is section dedicated to helping you (the LLM) produce more consistent and correct abac rules. You (the LLM) are to follow these rules strictly.

            The LLM_IMPROVEMENT section, has other instructions to help you (the LLM) produce better results.



        OUTPUT_FORMAT:
            1. Only respond with the ABAC rules being requested.
            2. Each rule should follow strict syntax described in the RULES_FORMAT_DESCRIPTION section.
            3. Each rule should be in its own line.
                    verify for each line:
                    line.startswith("rule(") and line.endswith(")")
                    line.count(";") == 3                
            4. Respond only with plain text, no mark-up or other type of formatting. 
                a. unseen values are forbidden.
            9. DO NOT INCLUDE ANY ``` at the beginnig or end of a response
         


        ABAC_RULES:
            
            1. ABAC rules should avoid using uid and rid attributes. 
                a. Do not hard code any ids, the rules should be dynamic.
            2. The generated rules must as concise as possible.
                a. Check all ABAC rules for redundancy, keep rules to strict minimum. 
                b. Consider removing any conjuncts in subject condition, resource condition, and constraints if that does not affect the permission given by the rule.
            6. You (the LLM) are allowed to combine rules for actions if they should grant the same access. 
                a. For example: rule (; subj ] {math}; {read, write, createNote}; class=class )
            7. ABAC rules do not need to dictate permit or deny as a section.
                a. INCORRECT = rule (; subj ] {math}; {read}; class=class, PERMIT )
            8. DO NOT ADD, REMOVE, OR EDIT ATTRIBUTES.
            9. Do not use synonyms when describing actions, stick to the action on the ACL list ONLY.


     






**READ THE ENTIRE REQUEST BEFORE GENERATING ANYTHING**

The following text is a request to fix ABAC rules. The text is separated into sections. To begin the text will name the section and the purpose of the section in this request.

	PROMPT section:  This will be the main request we need accomplished through the query.

    ATTRIBUTE_DESCRIPTION section: is a sample policy for a healthcare organization.
     Analyze this file to better understand ABAC rule attributes for our organization. Also use this section to better understand the ATTRIBUTE_DATA section    

    ATTRIBUTE_DATA_FORMAT_DESCRIPTION: This section explains the format of the ATTRIBUTE DATA described in the attribute data section.

    ATTRIBUTE_DATA section: is the attribute data for our organization. This includes resources and users. Use these to create the ABAC rules being requested. 

    RULES_FORMAT_DESCRIPTION: This section explains the format of the ABAC rules that we need you (the LLM) to generate.

    GROUND_TRUTH_ACL section: This section contains our organizations entire ACL (access Control List), this is the list that needs to be converted into a set of
     ABAC rules that grant the exact same permissions. 
     this is also known as the ground truth ACL.

	ADDITIONAL_INSTRUCTIONS section: contains additional instructions you need to follow. instructions that have to do with output results,
     the process, and other rules to help you (the LLM model) generate the exact results needed.


## PROMPT ##
    Our organization needs you (the LLM) to use the 
    ATTRIBUTE_DESCRIPTION , ATTRIBUTE_DATA_FORMAT_DESCRIPTION, ATTRIBUTE_DATA, RULES_FORMAT_DESCRIPTION, and ADDITIONAL_INSTRUCTIONS sections
    to generate a set of ABAC Rules that will give the same exact permissions that the GROUND_TRUTH_ACL gives. No less permission and no more permissions
    than what is in the GROUND_TRUTH_ACL.
        THE GOAL IS TO CREATE A SET OF ABAC RULES THAT WILL GENERATE THE SAME SET OF PERMISSIONS THAT THE ACL IN THE GROUND_TRUTH_ACL section,
        ANY PERMISSION THAT IS MISSED, BY YOUR GENERATED ABAC RULES, OR THAT IS OVER PEMRITTED BY YOUR ABAC RULE SET WILL BE CONSIDERED A FAILURE.
            This is mission critical so accuracy is critical.
    You (the LLM) must generate the fewest amount of rules that give the same exact permissions as the ACL that was provided.


## ATTRIBUTE_DESCRIPTION ##
# Policy Description: University 
*Vesion: v20250308*


This is a sample policy developed by Xu et al. (2015). The policy manages access to university resources for students, instructors, teaching assistants (TAs), department chairs, and staff in the registrar’s and admissions offices. It defines access rules for applications (for admission), gradebooks, transcripts, and course schedules.

**Reference**: Zhongyuan Xu and Scott D. Stoller. *Mining attribute-based access control policies.* IEEE Transactions on Dependable and Secure Computing, 12(5):533–545, September–October 2015.

## Attributes

### Subject/User Attributes
The subjects of this policy include faculty, staff, students, and applicants within the university system. The following attributes are used to describe the subjects.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| uid          | Single, String   | User’s unique identifier.                                  | csStu1, csFac1, etc.                         |
| position          | Single, String   | The user's position.        | applicant, student, faculty, staff.             |
| department        | Single, String   | The user's main department, for faculty and staff.                     | cs, ee, registrar, etc.                      |
| crsTaken         | Multi, Set\<String>   | Set of courses taken by a student.             | {cs101, ee602}, etc. |
| crsTaught    | Multi, Set\<String>   | Set of courses for which the user is the instructor ( faculty) or TA (for students) | {cs101, ee602}, etc.                          |
| isChair    | Single, Boolean   | Specifying if a faculty is the chair of their department.                     | True, False  |


### Resource Attributes
The resources of this policy include applications, gradebooks, rosters, and transcripts within the university system. The following attributes are used to describe the resources.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| rid      | Single, String   | Resource’s unique identifier                             | cs101roster, ee602gradebook, etc.               |
| type             | Single, String   | Type of resource being accessed.                        | application, gradebook, roster, transcript                       |
| crs       | Single, String   | The course associated with the gradebook or roster                 | cs101, ee602                            |
| student          | Single, String   | The student associated with the transcript or application.                      | csStu1, eeStu3, etc.                           |
| departments      | Multi, Set\<String>   | The department the course is in (for gradebook and roster), and the student’s major department(s) (for transcript).            | {cs, ee}, etc.                            |


## ATTRIBUTE_DATA_FORMAT_DESCRIPTION ##

    This section outlines the format of attribute data described in the ATTRIBUTE DATA section. 

   ATTRIBUTE_DATA section contains lines of the forms:

    userAttrib(uid, attribute1=value1, attribute2=value2, ...)

    resourceAttrib(rid, attribute1=value1, attribute2=value2, ...)
    

    The `userAttrib` and `resourceAttrib` lines define the users (subjects) and resources in the policy, respectively.
    - The first argument of a `userAttrib` is automatically assigned to an attribute named `uid`, which is the id of the user. 
    The first argument of a `resourceAttrib` is automatically assigned to an attribute named `rid`, which is the id of the resource.  
    - `value1`, `value2`, ... are atomic values or sets of atomic values.
    - An atomic value is a string that starts with a character other than a left curly brace.  
    - A set has the form `{element1 element2 ...}`. **Note that elements of a set are separated by spaces, not commas.**

## ATTRIBUTE_DATA ##
# ABAC policy for a university.

# Note that the two words "user" and "subject" are used interchangeably in this document.

# Please refer to the policy description document for the detailed descriptions subject attributes and resource attributes. Note that some attributes might be irrelevant for some users and resources.

#------------------------------------------------------------
# user attribute data
#------------------------------------------------------------

# applicants for admission to the university

userAttrib(applicant1, position=applicant)
userAttrib(applicant2, position=applicant)

# students

userAttrib(csStu1, position=student, department=cs, crsTaken={cs101})
userAttrib(csStu2, position=student, department=cs, crsTaken={cs601}, crsTaught={cs101 cs602})
userAttrib(csStu3, position=student, department=cs, crsTaken={cs602}, crsTaught={cs601})
userAttrib(csStu4, position=student, department=cs, crsTaken={cs601})
userAttrib(csStu5, position=student, department=cs, crsTaken={cs601 cs602})

userAttrib(eeStu1, position=student, department=ee, crsTaken={ee101})
userAttrib(eeStu2, position=student, department=ee, crsTaken={ee601}, crsTaught={ee101 ee602})
userAttrib(eeStu3, position=student, department=ee, crsTaken={ee602}, crsTaught={ee601})
userAttrib(eeStu4, position=student, department=ee, crsTaken={ee601})
userAttrib(eeStu5, position=student, department=ee, crsTaken={ee601 ee602})

# faculty

userAttrib(csFac1, position=faculty, department=cs, crsTaught={cs101})
userAttrib(csFac2, position=faculty, department=cs, crsTaught={cs601})
userAttrib(csChair, isChair=True, department=cs)

userAttrib(eeFac1, position=faculty, department=ee, crsTaught={ee101})
userAttrib(eeFac2, position=faculty, department=ee, crsTaught={ee601})
userAttrib(eeChair, isChair=True, department=ee)

# staff

userAttrib(registrar1, position=staff, department=registrar)
userAttrib(registrar2, position=staff, department=registrar)

userAttrib(admissions1, position=staff, department=admissions)
userAttrib(admissions2, position=staff, department=admissions)

#------------------------------------------------------------
# resource attribute data
#------------------------------------------------------------

# applications.  applications exist for applicants and students (accepted
# applicants).

resourceAttrib(application1, type=application, student=applicant1)
resourceAttrib(application2, type=application, student=applicant2)

resourceAttrib(csStu1application, type=application, student=csStu1)
resourceAttrib(csStu2application, type=application, student=csStu2)
resourceAttrib(csStu3application, type=application, student=csStu3)
resourceAttrib(csStu4application, type=application, student=csStu4)
resourceAttrib(csStu5application, type=application, student=csStu5)

resourceAttrib(eeStu1application, type=application, student=eeStu1)
resourceAttrib(eeStu2application, type=application, student=eeStu2)
resourceAttrib(eeStu3application, type=application, student=eeStu3)
resourceAttrib(eeStu4application, type=application, student=eeStu4)
resourceAttrib(eeStu5application, type=application, student=eeStu5)

# gradebooks

resourceAttrib(cs101gradebook, departments={cs}, crs=cs101, type=gradebook)
resourceAttrib(cs601gradebook, departments={cs}, crs=cs601, type=gradebook)
resourceAttrib(cs602gradebook, departments={cs}, crs=cs602, type=gradebook)

resourceAttrib(ee101gradebook, departments={ee}, crs=ee101, type=gradebook)
resourceAttrib(ee601gradebook, departments={ee}, crs=ee601, type=gradebook)
resourceAttrib(ee602gradebook, departments={ee}, crs=ee602, type=gradebook)

# rosters

resourceAttrib(cs101roster, departments={cs}, crs=cs101, type=roster)
resourceAttrib(cs601roster, departments={cs}, crs=cs601, type=roster)
resourceAttrib(cs602roster, departments={cs}, crs=cs602, type=roster)

resourceAttrib(ee101roster, departments={ee}, crs=ee101, type=roster)
resourceAttrib(ee601roster, departments={ee}, crs=ee601, type=roster)
resourceAttrib(ee602roster, departments={ee}, crs=ee602, type=roster)

# transcripts

resourceAttrib(csStu1trans, student=csStu1, departments={cs}, type=transcript)
resourceAttrib(csStu2trans, student=csStu2, departments={cs}, type=transcript)
resourceAttrib(csStu3trans, student=csStu3, departments={cs}, type=transcript)
resourceAttrib(csStu4trans, student=csStu4, departments={cs}, type=transcript)
resourceAttrib(csStu5trans, student=csStu5, departments={cs}, type=transcript)

resourceAttrib(eeStu1trans, student=eeStu1, departments={ee}, type=transcript)
resourceAttrib(eeStu2trans, student=eeStu2, departments={ee}, type=transcript)
resourceAttrib(eeStu3trans, student=eeStu3, departments={ee}, type=transcript)
resourceAttrib(eeStu4trans, student=eeStu4, departments={ee}, type=transcript)
resourceAttrib(eeStu5trans, student=eeStu5, departments={ee}, type=transcript)


## RULES_FORMAT_DESCRIPTION ##
    All of the output ABAC rules must follow the following format:
        rule(subCond; resCond; acts; cons)
    
    - `subCond` is a subject condition. It is a conjunction, with the conjuncts separated by commas. Each conjunct has the form 
    `attr [ {value1 value2 ...}`, where `attr` is a single-valued user attribute and `[` denotes the "in" 
    operator (note that elements of a set are separated by spaces, not commas), or 
    `attr ] value`
    , where attr is a muli-valued attribute, value is an atomic value, and `]` denotes the "contains" operator.

    - `resCond` is a resource condition. The syntax is analogous to the syntax for subject condition.

    - `acts` is a set of actions.

    - `cons` is a constraint. It is a conjunction of atomic constraints, with the
    conjuncts separated by commas. An atomic constraint is a formula of one of the following forms:
    
    aum > arm 
    aus [ arm
    aum ] ars
    aus = ars
    
    , where `aus` is a single-valued user attribute,
    `aum` is a multi-valued user attribute,
    `ars` is a single-valued resource attribute,
    `arm` is a multi-valued resource attribute. Note that `>` denotes the "supseteq" (⊇) operator.

    This is an example of a rule:
        rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)


## GROUND_TRUTH_ACL ##
registrar2, csStu1trans, read
registrar1, eeStu4trans, read
csStu2, cs602gradebook, readScore
csChair, csStu2trans, read
csStu2, csStu2trans, read
registrar1, cs101roster, write
csStu4, csStu4trans, read
registrar1, eeStu5trans, read
admissions1, eeStu3application, setStatus
eeFac1, ee101gradebook, readScore
admissions1, application1, read
registrar2, ee101roster, write
csFac1, cs101roster, read
csStu1, csStu1application, checkStatus
registrar2, cs602roster, read
admissions2, eeStu3application, setStatus
admissions2, eeStu5application, setStatus
registrar1, ee101roster, write
csStu3, cs601gradebook, readScore
registrar1, eeStu1trans, read
registrar2, eeStu1trans, read
admissions2, csStu4application, read
admissions2, eeStu1application, setStatus
registrar2, eeStu5trans, read
admissions1, eeStu4application, read
csStu5, cs601gradebook, readMyScores
csStu5, csStu5application, checkStatus
eeStu5, eeStu5trans, read
eeChair, eeStu1trans, read
registrar1, csStu3trans, read
csFac1, cs101gradebook, addScore
registrar2, csStu3trans, read
csStu3, csStu3application, checkStatus
eeStu2, ee101gradebook, addScore
eeStu2, ee602gradebook, addScore
registrar2, eeStu4trans, read
eeStu4, eeStu4application, checkStatus
eeChair, eeStu2trans, read
applicant1, application1, checkStatus
eeFac2, ee601roster, read
admissions1, csStu2application, read
registrar2, csStu4trans, read
eeFac2, ee601gradebook, readScore
registrar2, ee601roster, read
registrar2, cs602roster, write
admissions1, application2, read
registrar2, eeStu2trans, read
admissions1, application2, setStatus
csChair, csStu1trans, read
admissions1, eeStu1application, setStatus
admissions1, application1, setStatus
registrar1, csStu2trans, read
admissions1, eeStu2application, setStatus
admissions1, csStu5application, read
admissions2, csStu1application, read
csStu3, cs601gradebook, addScore
eeStu2, ee602gradebook, readScore
csStu3, cs602gradebook, readMyScores
eeFac1, ee101gradebook, assignGrade
registrar1, csStu4trans, read
admissions2, csStu2application, read
csFac2, cs601gradebook, readScore
registrar1, cs602roster, write
csFac2, cs601roster, read
registrar1, csStu5trans, read
csChair, csStu3trans, read
admissions2, csStu4application, setStatus
registrar1, eeStu3trans, read
registrar2, eeStu3trans, read
eeStu5, ee602gradebook, readMyScores
admissions2, csStu3application, setStatus
csFac1, cs101gradebook, changeScore
eeChair, eeStu5trans, read
registrar1, ee602roster, read
eeChair, eeStu4trans, read
registrar1, csStu1trans, read
registrar1, cs101roster, read
admissions2, csStu5application, read
eeStu2, eeStu2trans, read
admissions2, csStu5application, setStatus
registrar2, cs601roster, read
admissions2, eeStu1application, read
admissions1, csStu3application, setStatus
admissions1, eeStu4application, setStatus
csStu2, cs601gradebook, readMyScores
admissions1, eeStu1application, read
eeStu5, eeStu5application, checkStatus
admissions1, csStu1application, read
eeStu2, ee601gradebook, readMyScores
admissions2, eeStu3application, read
eeStu1, eeStu1application, checkStatus
admissions2, eeStu4application, read
registrar2, ee602roster, read
admissions2, eeStu2application, read
admissions2, csStu1application, setStatus
admissions2, eeStu5application, read
registrar1, ee601roster, write
registrar2, cs101roster, write
eeStu3, ee601gradebook, addScore
csStu3, csStu3trans, read
eeChair, eeStu3trans, read
csStu4, csStu4application, checkStatus
csFac1, cs101gradebook, assignGrade
admissions1, csStu5application, setStatus
eeStu4, eeStu4trans, read
eeStu2, ee101gradebook, readScore
registrar1, eeStu2trans, read
admissions1, eeStu2application, read
csStu4, cs601gradebook, readMyScores
admissions1, csStu1application, setStatus
eeFac1, ee101roster, read
eeFac2, ee601gradebook, changeScore
registrar1, ee101roster, read
admissions2, application2, setStatus
eeStu3, ee601gradebook, readScore
admissions2, csStu2application, setStatus
registrar1, cs601roster, write
admissions2, csStu3application, read
csFac2, cs601gradebook, changeScore
csStu2, csStu2application, checkStatus
registrar1, cs602roster, read
registrar1, ee602roster, write
eeStu5, ee601gradebook, readMyScores
csFac2, cs601gradebook, assignGrade
registrar1, cs601roster, read
eeStu1, eeStu1trans, read
registrar1, ee601roster, read
registrar2, cs601roster, write
admissions2, application1, read
admissions2, application1, setStatus
admissions2, eeStu4application, setStatus
eeStu3, ee602gradebook, readMyScores
registrar2, ee101roster, read
csChair, csStu4trans, read
registrar2, csStu5trans, read
admissions1, csStu4application, read
applicant2, application2, checkStatus
eeStu2, eeStu2application, checkStatus
csStu5, cs602gradebook, readMyScores
admissions2, application2, read
registrar2, ee601roster, write
eeFac1, ee101gradebook, addScore
admissions1, csStu2application, setStatus
eeFac2, ee601gradebook, assignGrade
eeFac1, ee101gradebook, changeScore
csStu2, cs602gradebook, addScore
admissions1, eeStu5application, setStatus
csFac1, cs101gradebook, readScore
eeStu3, eeStu3trans, read
admissions1, csStu3application, read
registrar2, cs101roster, read
eeStu1, ee101gradebook, readMyScores
eeFac2, ee601gradebook, addScore
eeStu3, eeStu3application, checkStatus
csStu2, cs101gradebook, readScore
csFac2, cs601gradebook, addScore
admissions1, csStu4application, setStatus
admissions1, eeStu3application, read
csStu5, csStu5trans, read
csChair, csStu5trans, read
csStu1, cs101gradebook, readMyScores
admissions2, eeStu2application, setStatus
eeStu4, ee601gradebook, readMyScores
admissions1, eeStu5application, read
registrar2, ee602roster, write
registrar2, csStu2trans, read
csStu2, cs101gradebook, addScore
csStu1, csStu1trans, read

## ADDITIONAL_INSTRUCTIONS

        This section provides additional instructions to assist you output propper ABAC rules.

        This is also divided into sections, the following is a description on the sections. 
        Failure to adhere to any of these rules will result in a failed query on your (the LLM) part.

            OUTPUT_FORMAT section: The output section describes how to format your (the LLMs) response. Including syntax, restrictions, and content. 
            
            ABAC_RULES section, is section dedicated to helping you (the LLM) produce more consistent and correct abac rules. You (the LLM) are to follow these rules strictly.

            The LLM_IMPROVEMENT section, has other instructions to help you (the LLM) produce better results.



        OUTPUT_FORMAT:
            1. Only respond with the ABAC rules being requested.
            2. Each rule should follow strict syntax described in the RULES_FORMAT_DESCRIPTION section.
            3. Each rule should be in its own line.
                    verify for each line:
                    line.startswith("rule(") and line.endswith(")")
                    line.count(";") == 3                
            4. Respond only with plain text, no mark-up or other type of formatting. 
                a. unseen values are forbidden.
            9. DO NOT INCLUDE ANY ``` at the beginnig or end of a response
         


        ABAC_RULES:
            
            1. ABAC rules should avoid using uid and rid attributes. 
                a. Do not hard code any ids, the rules should be dynamic.
            2. The generated rules must as concise as possible.
                a. Check all ABAC rules for redundancy, keep rules to strict minimum. 
                b. Consider removing any conjuncts in subject condition, resource condition, and constraints if that does not affect the permission given by the rule.
            6. You (the LLM) are allowed to combine rules for actions if they should grant the same access. 
                a. For example: rule (; subj ] {math}; {read, write, createNote}; class=class )
            7. ABAC rules do not need to dictate permit or deny as a section.
                a. INCORRECT = rule (; subj ] {math}; {read}; class=class, PERMIT )
            8. DO NOT ADD, REMOVE, OR EDIT ATTRIBUTES.
            9. Do not use synonyms when describing actions, stick to the action on the ACL list ONLY.


     






**READ THE ENTIRE REQUEST BEFORE GENERATING ANYTHING**

The following text is a request to fix ABAC rules. The text is separated into sections. To begin the text will name the section and the purpose of the section in this request.

	PROMPT section:  This will be the main request we need accomplished through the query.

    ATTRIBUTE_DESCRIPTION section: is a sample policy for a healthcare organization.
     Analyze this file to better understand ABAC rule attributes for our organization. Also use this section to better understand the ATTRIBUTE_DATA section    

    ATTRIBUTE_DATA_FORMAT_DESCRIPTION: This section explains the format of the ATTRIBUTE DATA described in the attribute data section.

    ATTRIBUTE_DATA section: is the attribute data for our organization. This includes resources and users. Use these to create the ABAC rules being requested. 

    RULES_FORMAT_DESCRIPTION: This section explains the format of the ABAC rules that we need you (the LLM) to generate.

    GROUND_TRUTH_ACL section: This section contains our organizations entire ACL (access Control List), this is the list that needs to be converted into a set of
     ABAC rules that grant the exact same permissions. 
     this is also known as the ground truth ACL.

	ADDITIONAL_INSTRUCTIONS section: contains additional instructions you need to follow. instructions that have to do with output results,
     the process, and other rules to help you (the LLM model) generate the exact results needed.


## PROMPT ##
    Our organization needs you (the LLM) to use the 
    ATTRIBUTE_DESCRIPTION , ATTRIBUTE_DATA_FORMAT_DESCRIPTION, ATTRIBUTE_DATA, RULES_FORMAT_DESCRIPTION, and ADDITIONAL_INSTRUCTIONS sections
    to generate a set of ABAC Rules that will give the same exact permissions that the GROUND_TRUTH_ACL gives. No less permission and no more permissions
    than what is in the GROUND_TRUTH_ACL.
        THE GOAL IS TO CREATE A SET OF ABAC RULES THAT WILL GENERATE THE SAME SET OF PERMISSIONS THAT THE ACL IN THE GROUND_TRUTH_ACL section,
        ANY PERMISSION THAT IS MISSED, BY YOUR GENERATED ABAC RULES, OR THAT IS OVER PEMRITTED BY YOUR ABAC RULE SET WILL BE CONSIDERED A FAILURE.
            This is mission critical so accuracy is critical.
    You (the LLM) must generate the fewest amount of rules that give the same exact permissions as the ACL that was provided.


## ATTRIBUTE_DESCRIPTION ##
# Policy Description: University 
*Vesion: v20250308*


This is a sample policy developed by Xu et al. (2015). The policy manages access to university resources for students, instructors, teaching assistants (TAs), department chairs, and staff in the registrar’s and admissions offices. It defines access rules for applications (for admission), gradebooks, transcripts, and course schedules.

**Reference**: Zhongyuan Xu and Scott D. Stoller. *Mining attribute-based access control policies.* IEEE Transactions on Dependable and Secure Computing, 12(5):533–545, September–October 2015.

## Attributes

### Subject/User Attributes
The subjects of this policy include faculty, staff, students, and applicants within the university system. The following attributes are used to describe the subjects.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| uid          | Single, String   | User’s unique identifier.                                  | csStu1, csFac1, etc.                         |
| position          | Single, String   | The user's position.        | applicant, student, faculty, staff.             |
| department        | Single, String   | The user's main department, for faculty and staff.                     | cs, ee, registrar, etc.                      |
| crsTaken         | Multi, Set\<String>   | Set of courses taken by a student.             | {cs101, ee602}, etc. |
| crsTaught    | Multi, Set\<String>   | Set of courses for which the user is the instructor ( faculty) or TA (for students) | {cs101, ee602}, etc.                          |
| isChair    | Single, Boolean   | Specifying if a faculty is the chair of their department.                     | True, False  |


### Resource Attributes
The resources of this policy include applications, gradebooks, rosters, and transcripts within the university system. The following attributes are used to describe the resources.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| rid      | Single, String   | Resource’s unique identifier                             | cs101roster, ee602gradebook, etc.               |
| type             | Single, String   | Type of resource being accessed.                        | application, gradebook, roster, transcript                       |
| crs       | Single, String   | The course associated with the gradebook or roster                 | cs101, ee602                            |
| student          | Single, String   | The student associated with the transcript or application.                      | csStu1, eeStu3, etc.                           |
| departments      | Multi, Set\<String>   | The department the course is in (for gradebook and roster), and the student’s major department(s) (for transcript).            | {cs, ee}, etc.                            |


## ATTRIBUTE_DATA_FORMAT_DESCRIPTION ##

    This section outlines the format of attribute data described in the ATTRIBUTE DATA section. 

   ATTRIBUTE_DATA section contains lines of the forms:

    userAttrib(uid, attribute1=value1, attribute2=value2, ...)

    resourceAttrib(rid, attribute1=value1, attribute2=value2, ...)
    

    The `userAttrib` and `resourceAttrib` lines define the users (subjects) and resources in the policy, respectively.
    - The first argument of a `userAttrib` is automatically assigned to an attribute named `uid`, which is the id of the user. 
    The first argument of a `resourceAttrib` is automatically assigned to an attribute named `rid`, which is the id of the resource.  
    - `value1`, `value2`, ... are atomic values or sets of atomic values.
    - An atomic value is a string that starts with a character other than a left curly brace.  
    - A set has the form `{element1 element2 ...}`. **Note that elements of a set are separated by spaces, not commas.**

## ATTRIBUTE_DATA ##
# ABAC policy for a university.

# Note that the two words "user" and "subject" are used interchangeably in this document.

# Please refer to the policy description document for the detailed descriptions subject attributes and resource attributes. Note that some attributes might be irrelevant for some users and resources.

#------------------------------------------------------------
# user attribute data
#------------------------------------------------------------

# applicants for admission to the university

userAttrib(applicant1, position=applicant)
userAttrib(applicant2, position=applicant)

# students

userAttrib(csStu1, position=student, department=cs, crsTaken={cs101})
userAttrib(csStu2, position=student, department=cs, crsTaken={cs601}, crsTaught={cs101 cs602})
userAttrib(csStu3, position=student, department=cs, crsTaken={cs602}, crsTaught={cs601})
userAttrib(csStu4, position=student, department=cs, crsTaken={cs601})
userAttrib(csStu5, position=student, department=cs, crsTaken={cs601 cs602})

userAttrib(eeStu1, position=student, department=ee, crsTaken={ee101})
userAttrib(eeStu2, position=student, department=ee, crsTaken={ee601}, crsTaught={ee101 ee602})
userAttrib(eeStu3, position=student, department=ee, crsTaken={ee602}, crsTaught={ee601})
userAttrib(eeStu4, position=student, department=ee, crsTaken={ee601})
userAttrib(eeStu5, position=student, department=ee, crsTaken={ee601 ee602})

# faculty

userAttrib(csFac1, position=faculty, department=cs, crsTaught={cs101})
userAttrib(csFac2, position=faculty, department=cs, crsTaught={cs601})
userAttrib(csChair, isChair=True, department=cs)

userAttrib(eeFac1, position=faculty, department=ee, crsTaught={ee101})
userAttrib(eeFac2, position=faculty, department=ee, crsTaught={ee601})
userAttrib(eeChair, isChair=True, department=ee)

# staff

userAttrib(registrar1, position=staff, department=registrar)
userAttrib(registrar2, position=staff, department=registrar)

userAttrib(admissions1, position=staff, department=admissions)
userAttrib(admissions2, position=staff, department=admissions)

#------------------------------------------------------------
# resource attribute data
#------------------------------------------------------------

# applications.  applications exist for applicants and students (accepted
# applicants).

resourceAttrib(application1, type=application, student=applicant1)
resourceAttrib(application2, type=application, student=applicant2)

resourceAttrib(csStu1application, type=application, student=csStu1)
resourceAttrib(csStu2application, type=application, student=csStu2)
resourceAttrib(csStu3application, type=application, student=csStu3)
resourceAttrib(csStu4application, type=application, student=csStu4)
resourceAttrib(csStu5application, type=application, student=csStu5)

resourceAttrib(eeStu1application, type=application, student=eeStu1)
resourceAttrib(eeStu2application, type=application, student=eeStu2)
resourceAttrib(eeStu3application, type=application, student=eeStu3)
resourceAttrib(eeStu4application, type=application, student=eeStu4)
resourceAttrib(eeStu5application, type=application, student=eeStu5)

# gradebooks

resourceAttrib(cs101gradebook, departments={cs}, crs=cs101, type=gradebook)
resourceAttrib(cs601gradebook, departments={cs}, crs=cs601, type=gradebook)
resourceAttrib(cs602gradebook, departments={cs}, crs=cs602, type=gradebook)

resourceAttrib(ee101gradebook, departments={ee}, crs=ee101, type=gradebook)
resourceAttrib(ee601gradebook, departments={ee}, crs=ee601, type=gradebook)
resourceAttrib(ee602gradebook, departments={ee}, crs=ee602, type=gradebook)

# rosters

resourceAttrib(cs101roster, departments={cs}, crs=cs101, type=roster)
resourceAttrib(cs601roster, departments={cs}, crs=cs601, type=roster)
resourceAttrib(cs602roster, departments={cs}, crs=cs602, type=roster)

resourceAttrib(ee101roster, departments={ee}, crs=ee101, type=roster)
resourceAttrib(ee601roster, departments={ee}, crs=ee601, type=roster)
resourceAttrib(ee602roster, departments={ee}, crs=ee602, type=roster)

# transcripts

resourceAttrib(csStu1trans, student=csStu1, departments={cs}, type=transcript)
resourceAttrib(csStu2trans, student=csStu2, departments={cs}, type=transcript)
resourceAttrib(csStu3trans, student=csStu3, departments={cs}, type=transcript)
resourceAttrib(csStu4trans, student=csStu4, departments={cs}, type=transcript)
resourceAttrib(csStu5trans, student=csStu5, departments={cs}, type=transcript)

resourceAttrib(eeStu1trans, student=eeStu1, departments={ee}, type=transcript)
resourceAttrib(eeStu2trans, student=eeStu2, departments={ee}, type=transcript)
resourceAttrib(eeStu3trans, student=eeStu3, departments={ee}, type=transcript)
resourceAttrib(eeStu4trans, student=eeStu4, departments={ee}, type=transcript)
resourceAttrib(eeStu5trans, student=eeStu5, departments={ee}, type=transcript)


## RULES_FORMAT_DESCRIPTION ##
    All of the output ABAC rules must follow the following format:
        rule(subCond; resCond; acts; cons)
    
    - `subCond` is a subject condition. It is a conjunction, with the conjuncts separated by commas. Each conjunct has the form 
    `attr [ {value1 value2 ...}`, where `attr` is a single-valued user attribute and `[` denotes the "in" 
    operator (note that elements of a set are separated by spaces, not commas), or 
    `attr ] value`
    , where attr is a muli-valued attribute, value is an atomic value, and `]` denotes the "contains" operator.

    - `resCond` is a resource condition. The syntax is analogous to the syntax for subject condition.

    - `acts` is a set of actions.

    - `cons` is a constraint. It is a conjunction of atomic constraints, with the
    conjuncts separated by commas. An atomic constraint is a formula of one of the following forms:
    
    aum > arm 
    aus [ arm
    aum ] ars
    aus = ars
    
    , where `aus` is a single-valued user attribute,
    `aum` is a multi-valued user attribute,
    `ars` is a single-valued resource attribute,
    `arm` is a multi-valued resource attribute. Note that `>` denotes the "supseteq" (⊇) operator.

    This is an example of a rule:
        rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)


## GROUND_TRUTH_ACL ##
registrar2, csStu1trans, read
registrar1, eeStu4trans, read
csStu2, cs602gradebook, readScore
csChair, csStu2trans, read
csStu2, csStu2trans, read
registrar1, cs101roster, write
csStu4, csStu4trans, read
registrar1, eeStu5trans, read
admissions1, eeStu3application, setStatus
eeFac1, ee101gradebook, readScore
admissions1, application1, read
registrar2, ee101roster, write
csFac1, cs101roster, read
csStu1, csStu1application, checkStatus
registrar2, cs602roster, read
admissions2, eeStu3application, setStatus
admissions2, eeStu5application, setStatus
registrar1, ee101roster, write
csStu3, cs601gradebook, readScore
registrar1, eeStu1trans, read
registrar2, eeStu1trans, read
admissions2, csStu4application, read
admissions2, eeStu1application, setStatus
registrar2, eeStu5trans, read
admissions1, eeStu4application, read
csStu5, cs601gradebook, readMyScores
csStu5, csStu5application, checkStatus
eeStu5, eeStu5trans, read
eeChair, eeStu1trans, read
registrar1, csStu3trans, read
csFac1, cs101gradebook, addScore
registrar2, csStu3trans, read
csStu3, csStu3application, checkStatus
eeStu2, ee101gradebook, addScore
eeStu2, ee602gradebook, addScore
registrar2, eeStu4trans, read
eeStu4, eeStu4application, checkStatus
eeChair, eeStu2trans, read
applicant1, application1, checkStatus
eeFac2, ee601roster, read
admissions1, csStu2application, read
registrar2, csStu4trans, read
eeFac2, ee601gradebook, readScore
registrar2, ee601roster, read
registrar2, cs602roster, write
admissions1, application2, read
registrar2, eeStu2trans, read
admissions1, application2, setStatus
csChair, csStu1trans, read
admissions1, eeStu1application, setStatus
admissions1, application1, setStatus
registrar1, csStu2trans, read
admissions1, eeStu2application, setStatus
admissions1, csStu5application, read
admissions2, csStu1application, read
csStu3, cs601gradebook, addScore
eeStu2, ee602gradebook, readScore
csStu3, cs602gradebook, readMyScores
eeFac1, ee101gradebook, assignGrade
registrar1, csStu4trans, read
admissions2, csStu2application, read
csFac2, cs601gradebook, readScore
registrar1, cs602roster, write
csFac2, cs601roster, read
registrar1, csStu5trans, read
csChair, csStu3trans, read
admissions2, csStu4application, setStatus
registrar1, eeStu3trans, read
registrar2, eeStu3trans, read
eeStu5, ee602gradebook, readMyScores
admissions2, csStu3application, setStatus
csFac1, cs101gradebook, changeScore
eeChair, eeStu5trans, read
registrar1, ee602roster, read
eeChair, eeStu4trans, read
registrar1, csStu1trans, read
registrar1, cs101roster, read
admissions2, csStu5application, read
eeStu2, eeStu2trans, read
admissions2, csStu5application, setStatus
registrar2, cs601roster, read
admissions2, eeStu1application, read
admissions1, csStu3application, setStatus
admissions1, eeStu4application, setStatus
csStu2, cs601gradebook, readMyScores
admissions1, eeStu1application, read
eeStu5, eeStu5application, checkStatus
admissions1, csStu1application, read
eeStu2, ee601gradebook, readMyScores
admissions2, eeStu3application, read
eeStu1, eeStu1application, checkStatus
admissions2, eeStu4application, read
registrar2, ee602roster, read
admissions2, eeStu2application, read
admissions2, csStu1application, setStatus
admissions2, eeStu5application, read
registrar1, ee601roster, write
registrar2, cs101roster, write
eeStu3, ee601gradebook, addScore
csStu3, csStu3trans, read
eeChair, eeStu3trans, read
csStu4, csStu4application, checkStatus
csFac1, cs101gradebook, assignGrade
admissions1, csStu5application, setStatus
eeStu4, eeStu4trans, read
eeStu2, ee101gradebook, readScore
registrar1, eeStu2trans, read
admissions1, eeStu2application, read
csStu4, cs601gradebook, readMyScores
admissions1, csStu1application, setStatus
eeFac1, ee101roster, read
eeFac2, ee601gradebook, changeScore
registrar1, ee101roster, read
admissions2, application2, setStatus
eeStu3, ee601gradebook, readScore
admissions2, csStu2application, setStatus
registrar1, cs601roster, write
admissions2, csStu3application, read
csFac2, cs601gradebook, changeScore
csStu2, csStu2application, checkStatus
registrar1, cs602roster, read
registrar1, ee602roster, write
eeStu5, ee601gradebook, readMyScores
csFac2, cs601gradebook, assignGrade
registrar1, cs601roster, read
eeStu1, eeStu1trans, read
registrar1, ee601roster, read
registrar2, cs601roster, write
admissions2, application1, read
admissions2, application1, setStatus
admissions2, eeStu4application, setStatus
eeStu3, ee602gradebook, readMyScores
registrar2, ee101roster, read
csChair, csStu4trans, read
registrar2, csStu5trans, read
admissions1, csStu4application, read
applicant2, application2, checkStatus
eeStu2, eeStu2application, checkStatus
csStu5, cs602gradebook, readMyScores
admissions2, application2, read
registrar2, ee601roster, write
eeFac1, ee101gradebook, addScore
admissions1, csStu2application, setStatus
eeFac2, ee601gradebook, assignGrade
eeFac1, ee101gradebook, changeScore
csStu2, cs602gradebook, addScore
admissions1, eeStu5application, setStatus
csFac1, cs101gradebook, readScore
eeStu3, eeStu3trans, read
admissions1, csStu3application, read
registrar2, cs101roster, read
eeStu1, ee101gradebook, readMyScores
eeFac2, ee601gradebook, addScore
eeStu3, eeStu3application, checkStatus
csStu2, cs101gradebook, readScore
csFac2, cs601gradebook, addScore
admissions1, csStu4application, setStatus
admissions1, eeStu3application, read
csStu5, csStu5trans, read
csChair, csStu5trans, read
csStu1, cs101gradebook, readMyScores
admissions2, eeStu2application, setStatus
eeStu4, ee601gradebook, readMyScores
admissions1, eeStu5application, read
registrar2, ee602roster, write
registrar2, csStu2trans, read
csStu2, cs101gradebook, addScore
csStu1, csStu1trans, read

## ADDITIONAL_INSTRUCTIONS

        This section provides additional instructions to assist you output propper ABAC rules.

        This is also divided into sections, the following is a description on the sections. 
        Failure to adhere to any of these rules will result in a failed query on your (the LLM) part.

            OUTPUT_FORMAT section: The output section describes how to format your (the LLMs) response. Including syntax, restrictions, and content. 
            
            ABAC_RULES section, is section dedicated to helping you (the LLM) produce more consistent and correct abac rules. You (the LLM) are to follow these rules strictly.

            The LLM_IMPROVEMENT section, has other instructions to help you (the LLM) produce better results.



        OUTPUT_FORMAT:
            1. Only respond with the ABAC rules being requested.
            2. Each rule should follow strict syntax described in the RULES_FORMAT_DESCRIPTION section.
            3. Each rule should be in its own line.
                    verify for each line:
                    line.startswith("rule(") and line.endswith(")")
                    line.count(";") == 3                
            4. Respond only with plain text, no mark-up or other type of formatting. 
                a. unseen values are forbidden.
            9. DO NOT INCLUDE ANY ``` at the beginnig or end of a response
         


        ABAC_RULES:
            
            1. ABAC rules should avoid using uid and rid attributes. 
                a. Do not hard code any ids, the rules should be dynamic.
            2. The generated rules must as concise as possible.
                a. Check all ABAC rules for redundancy, keep rules to strict minimum. 
                b. Consider removing any conjuncts in subject condition, resource condition, and constraints if that does not affect the permission given by the rule.
            6. You (the LLM) are allowed to combine rules for actions if they should grant the same access. 
                a. For example: rule (; subj ] {math}; {read, write, createNote}; class=class )
            7. ABAC rules do not need to dictate permit or deny as a section.
                a. INCORRECT = rule (; subj ] {math}; {read}; class=class, PERMIT )
            8. DO NOT ADD, REMOVE, OR EDIT ATTRIBUTES.
            9. Do not use synonyms when describing actions, stick to the action on the ACL list ONLY.


     






**READ THE ENTIRE REQUEST BEFORE GENERATING ANYTHING**

The following text is a request to fix ABAC rules. The text is separated into sections. To begin the text will name the section and the purpose of the section in this request.

	PROMPT section:  This will be the main request we need accomplished through the query.

    ATTRIBUTE_DESCRIPTION section: is a sample policy for a healthcare organization.
     Analyze this file to better understand ABAC rule attributes for our organization. Also use this section to better understand the ATTRIBUTE_DATA section    

    ATTRIBUTE_DATA_FORMAT_DESCRIPTION: This section explains the format of the ATTRIBUTE DATA described in the attribute data section.

    ATTRIBUTE_DATA section: is the attribute data for our organization. This includes resources and users. Use these to create the ABAC rules being requested. 

    RULES_FORMAT_DESCRIPTION: This section explains the format of the ABAC rules that we need you (the LLM) to generate.

    GROUND_TRUTH_ACL section: This section contains our organizations entire ACL (access Control List), this is the list that needs to be converted into a set of
     ABAC rules that grant the exact same permissions. 
     this is also known as the ground truth ACL.

	ADDITIONAL_INSTRUCTIONS section: contains additional instructions you need to follow. instructions that have to do with output results,
     the process, and other rules to help you (the LLM model) generate the exact results needed.


## PROMPT ##
    Our organization needs you (the LLM) to use the 
    ATTRIBUTE_DESCRIPTION , ATTRIBUTE_DATA_FORMAT_DESCRIPTION, ATTRIBUTE_DATA, RULES_FORMAT_DESCRIPTION, and ADDITIONAL_INSTRUCTIONS sections
    to generate a set of ABAC Rules that will give the same exact permissions that the GROUND_TRUTH_ACL gives. No less permission and no more permissions
    than what is in the GROUND_TRUTH_ACL.
        THE GOAL IS TO CREATE A SET OF ABAC RULES THAT WILL GENERATE THE SAME SET OF PERMISSIONS THAT THE ACL IN THE GROUND_TRUTH_ACL section,
        ANY PERMISSION THAT IS MISSED, BY YOUR GENERATED ABAC RULES, OR THAT IS OVER PEMRITTED BY YOUR ABAC RULE SET WILL BE CONSIDERED A FAILURE.
            This is mission critical so accuracy is critical.
    You (the LLM) must generate the fewest amount of rules that give the same exact permissions as the ACL that was provided.


## ATTRIBUTE_DESCRIPTION ##
# Policy Description: University 
*Vesion: v20250308*


This is a sample policy developed by Xu et al. (2015). The policy manages access to university resources for students, instructors, teaching assistants (TAs), department chairs, and staff in the registrar’s and admissions offices. It defines access rules for applications (for admission), gradebooks, transcripts, and course schedules.

**Reference**: Zhongyuan Xu and Scott D. Stoller. *Mining attribute-based access control policies.* IEEE Transactions on Dependable and Secure Computing, 12(5):533–545, September–October 2015.

## Attributes

### Subject/User Attributes
The subjects of this policy include faculty, staff, students, and applicants within the university system. The following attributes are used to describe the subjects.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| uid          | Single, String   | User’s unique identifier.                                  | csStu1, csFac1, etc.                         |
| position          | Single, String   | The user's position.        | applicant, student, faculty, staff.             |
| department        | Single, String   | The user's main department, for faculty and staff.                     | cs, ee, registrar, etc.                      |
| crsTaken         | Multi, Set\<String>   | Set of courses taken by a student.             | {cs101, ee602}, etc. |
| crsTaught    | Multi, Set\<String>   | Set of courses for which the user is the instructor ( faculty) or TA (for students) | {cs101, ee602}, etc.                          |
| isChair    | Single, Boolean   | Specifying if a faculty is the chair of their department.                     | True, False  |


### Resource Attributes
The resources of this policy include applications, gradebooks, rosters, and transcripts within the university system. The following attributes are used to describe the resources.

| Attribute Name      | Multiplicity, Type     | Description                                               | Example Values                                     |
|--------------------|------------------|-----------------------------------------------------------|--------------------------------------------------|
| rid      | Single, String   | Resource’s unique identifier                             | cs101roster, ee602gradebook, etc.               |
| type             | Single, String   | Type of resource being accessed.                        | application, gradebook, roster, transcript                       |
| crs       | Single, String   | The course associated with the gradebook or roster                 | cs101, ee602                            |
| student          | Single, String   | The student associated with the transcript or application.                      | csStu1, eeStu3, etc.                           |
| departments      | Multi, Set\<String>   | The department the course is in (for gradebook and roster), and the student’s major department(s) (for transcript).            | {cs, ee}, etc.                            |


## ATTRIBUTE_DATA_FORMAT_DESCRIPTION ##

    This section outlines the format of attribute data described in the ATTRIBUTE DATA section. 

   ATTRIBUTE_DATA section contains lines of the forms:

    userAttrib(uid, attribute1=value1, attribute2=value2, ...)

    resourceAttrib(rid, attribute1=value1, attribute2=value2, ...)
    

    The `userAttrib` and `resourceAttrib` lines define the users (subjects) and resources in the policy, respectively.
    - The first argument of a `userAttrib` is automatically assigned to an attribute named `uid`, which is the id of the user. 
    The first argument of a `resourceAttrib` is automatically assigned to an attribute named `rid`, which is the id of the resource.  
    - `value1`, `value2`, ... are atomic values or sets of atomic values.
    - An atomic value is a string that starts with a character other than a left curly brace.  
    - A set has the form `{element1 element2 ...}`. **Note that elements of a set are separated by spaces, not commas.**

## ATTRIBUTE_DATA ##
# ABAC policy for a university.

# Note that the two words "user" and "subject" are used interchangeably in this document.

# Please refer to the policy description document for the detailed descriptions subject attributes and resource attributes. Note that some attributes might be irrelevant for some users and resources.

#------------------------------------------------------------
# user attribute data
#------------------------------------------------------------

# applicants for admission to the university

userAttrib(applicant1, position=applicant)
userAttrib(applicant2, position=applicant)

# students

userAttrib(csStu1, position=student, department=cs, crsTaken={cs101})
userAttrib(csStu2, position=student, department=cs, crsTaken={cs601}, crsTaught={cs101 cs602})
userAttrib(csStu3, position=student, department=cs, crsTaken={cs602}, crsTaught={cs601})
userAttrib(csStu4, position=student, department=cs, crsTaken={cs601})
userAttrib(csStu5, position=student, department=cs, crsTaken={cs601 cs602})

userAttrib(eeStu1, position=student, department=ee, crsTaken={ee101})
userAttrib(eeStu2, position=student, department=ee, crsTaken={ee601}, crsTaught={ee101 ee602})
userAttrib(eeStu3, position=student, department=ee, crsTaken={ee602}, crsTaught={ee601})
userAttrib(eeStu4, position=student, department=ee, crsTaken={ee601})
userAttrib(eeStu5, position=student, department=ee, crsTaken={ee601 ee602})

# faculty

userAttrib(csFac1, position=faculty, department=cs, crsTaught={cs101})
userAttrib(csFac2, position=faculty, department=cs, crsTaught={cs601})
userAttrib(csChair, isChair=True, department=cs)

userAttrib(eeFac1, position=faculty, department=ee, crsTaught={ee101})
userAttrib(eeFac2, position=faculty, department=ee, crsTaught={ee601})
userAttrib(eeChair, isChair=True, department=ee)

# staff

userAttrib(registrar1, position=staff, department=registrar)
userAttrib(registrar2, position=staff, department=registrar)

userAttrib(admissions1, position=staff, department=admissions)
userAttrib(admissions2, position=staff, department=admissions)

#------------------------------------------------------------
# resource attribute data
#------------------------------------------------------------

# applications.  applications exist for applicants and students (accepted
# applicants).

resourceAttrib(application1, type=application, student=applicant1)
resourceAttrib(application2, type=application, student=applicant2)

resourceAttrib(csStu1application, type=application, student=csStu1)
resourceAttrib(csStu2application, type=application, student=csStu2)
resourceAttrib(csStu3application, type=application, student=csStu3)
resourceAttrib(csStu4application, type=application, student=csStu4)
resourceAttrib(csStu5application, type=application, student=csStu5)

resourceAttrib(eeStu1application, type=application, student=eeStu1)
resourceAttrib(eeStu2application, type=application, student=eeStu2)
resourceAttrib(eeStu3application, type=application, student=eeStu3)
resourceAttrib(eeStu4application, type=application, student=eeStu4)
resourceAttrib(eeStu5application, type=application, student=eeStu5)

# gradebooks

resourceAttrib(cs101gradebook, departments={cs}, crs=cs101, type=gradebook)
resourceAttrib(cs601gradebook, departments={cs}, crs=cs601, type=gradebook)
resourceAttrib(cs602gradebook, departments={cs}, crs=cs602, type=gradebook)

resourceAttrib(ee101gradebook, departments={ee}, crs=ee101, type=gradebook)
resourceAttrib(ee601gradebook, departments={ee}, crs=ee601, type=gradebook)
resourceAttrib(ee602gradebook, departments={ee}, crs=ee602, type=gradebook)

# rosters

resourceAttrib(cs101roster, departments={cs}, crs=cs101, type=roster)
resourceAttrib(cs601roster, departments={cs}, crs=cs601, type=roster)
resourceAttrib(cs602roster, departments={cs}, crs=cs602, type=roster)

resourceAttrib(ee101roster, departments={ee}, crs=ee101, type=roster)
resourceAttrib(ee601roster, departments={ee}, crs=ee601, type=roster)
resourceAttrib(ee602roster, departments={ee}, crs=ee602, type=roster)

# transcripts

resourceAttrib(csStu1trans, student=csStu1, departments={cs}, type=transcript)
resourceAttrib(csStu2trans, student=csStu2, departments={cs}, type=transcript)
resourceAttrib(csStu3trans, student=csStu3, departments={cs}, type=transcript)
resourceAttrib(csStu4trans, student=csStu4, departments={cs}, type=transcript)
resourceAttrib(csStu5trans, student=csStu5, departments={cs}, type=transcript)

resourceAttrib(eeStu1trans, student=eeStu1, departments={ee}, type=transcript)
resourceAttrib(eeStu2trans, student=eeStu2, departments={ee}, type=transcript)
resourceAttrib(eeStu3trans, student=eeStu3, departments={ee}, type=transcript)
resourceAttrib(eeStu4trans, student=eeStu4, departments={ee}, type=transcript)
resourceAttrib(eeStu5trans, student=eeStu5, departments={ee}, type=transcript)


## RULES_FORMAT_DESCRIPTION ##
    All of the output ABAC rules must follow the following format:
        rule(subCond; resCond; acts; cons)
    
    - `subCond` is a subject condition. It is a conjunction, with the conjuncts separated by commas. Each conjunct has the form 
    `attr [ {value1 value2 ...}`, where `attr` is a single-valued user attribute and `[` denotes the "in" 
    operator (note that elements of a set are separated by spaces, not commas), or 
    `attr ] value`
    , where attr is a muli-valued attribute, value is an atomic value, and `]` denotes the "contains" operator.

    - `resCond` is a resource condition. The syntax is analogous to the syntax for subject condition.

    - `acts` is a set of actions.

    - `cons` is a constraint. It is a conjunction of atomic constraints, with the
    conjuncts separated by commas. An atomic constraint is a formula of one of the following forms:
    
    aum > arm 
    aus [ arm
    aum ] ars
    aus = ars
    
    , where `aus` is a single-valued user attribute,
    `aum` is a multi-valued user attribute,
    `ars` is a single-valued resource attribute,
    `arm` is a multi-valued resource attribute. Note that `>` denotes the "supseteq" (⊇) operator.

    This is an example of a rule:
        rule(provider [ {eWorkforce}, position [ {helpdeskOperator}; type [ {contract}, contractStatus [ {active}, tenantType [ {primary}; {createOneTimeWorkOrder createRecurrentWorkOrder}; assignedTenant = tenant)


## GROUND_TRUTH_ACL ##
registrar2, csStu1trans, read
registrar1, eeStu4trans, read
csStu2, cs602gradebook, readScore
csChair, csStu2trans, read
csStu2, csStu2trans, read
registrar1, cs101roster, write
csStu4, csStu4trans, read
registrar1, eeStu5trans, read
admissions1, eeStu3application, setStatus
eeFac1, ee101gradebook, readScore
admissions1, application1, read
registrar2, ee101roster, write
csFac1, cs101roster, read
csStu1, csStu1application, checkStatus
registrar2, cs602roster, read
admissions2, eeStu3application, setStatus
admissions2, eeStu5application, setStatus
registrar1, ee101roster, write
csStu3, cs601gradebook, readScore
registrar1, eeStu1trans, read
registrar2, eeStu1trans, read
admissions2, csStu4application, read
admissions2, eeStu1application, setStatus
registrar2, eeStu5trans, read
admissions1, eeStu4application, read
csStu5, cs601gradebook, readMyScores
csStu5, csStu5application, checkStatus
eeStu5, eeStu5trans, read
eeChair, eeStu1trans, read
registrar1, csStu3trans, read
csFac1, cs101gradebook, addScore
registrar2, csStu3trans, read
csStu3, csStu3application, checkStatus
eeStu2, ee101gradebook, addScore
eeStu2, ee602gradebook, addScore
registrar2, eeStu4trans, read
eeStu4, eeStu4application, checkStatus
eeChair, eeStu2trans, read
applicant1, application1, checkStatus
eeFac2, ee601roster, read
admissions1, csStu2application, read
registrar2, csStu4trans, read
eeFac2, ee601gradebook, readScore
registrar2, ee601roster, read
registrar2, cs602roster, write
admissions1, application2, read
registrar2, eeStu2trans, read
admissions1, application2, setStatus
csChair, csStu1trans, read
admissions1, eeStu1application, setStatus
admissions1, application1, setStatus
registrar1, csStu2trans, read
admissions1, eeStu2application, setStatus
admissions1, csStu5application, read
admissions2, csStu1application, read
csStu3, cs601gradebook, addScore
eeStu2, ee602gradebook, readScore
csStu3, cs602gradebook, readMyScores
eeFac1, ee101gradebook, assignGrade
registrar1, csStu4trans, read
admissions2, csStu2application, read
csFac2, cs601gradebook, readScore
registrar1, cs602roster, write
csFac2, cs601roster, read
registrar1, csStu5trans, read
csChair, csStu3trans, read
admissions2, csStu4application, setStatus
registrar1, eeStu3trans, read
registrar2, eeStu3trans, read
eeStu5, ee602gradebook, readMyScores
admissions2, csStu3application, setStatus
csFac1, cs101gradebook, changeScore
eeChair, eeStu5trans, read
registrar1, ee602roster, read
eeChair, eeStu4trans, read
registrar1, csStu1trans, read
registrar1, cs101roster, read
admissions2, csStu5application, read
eeStu2, eeStu2trans, read
admissions2, csStu5application, setStatus
registrar2, cs601roster, read
admissions2, eeStu1application, read
admissions1, csStu3application, setStatus
admissions1, eeStu4application, setStatus
csStu2, cs601gradebook, readMyScores
admissions1, eeStu1application, read
eeStu5, eeStu5application, checkStatus
admissions1, csStu1application, read
eeStu2, ee601gradebook, readMyScores
admissions2, eeStu3application, read
eeStu1, eeStu1application, checkStatus
admissions2, eeStu4application, read
registrar2, ee602roster, read
admissions2, eeStu2application, read
admissions2, csStu1application, setStatus
admissions2, eeStu5application, read
registrar1, ee601roster, write
registrar2, cs101roster, write
eeStu3, ee601gradebook, addScore
csStu3, csStu3trans, read
eeChair, eeStu3trans, read
csStu4, csStu4application, checkStatus
csFac1, cs101gradebook, assignGrade
admissions1, csStu5application, setStatus
eeStu4, eeStu4trans, read
eeStu2, ee101gradebook, readScore
registrar1, eeStu2trans, read
admissions1, eeStu2application, read
csStu4, cs601gradebook, readMyScores
admissions1, csStu1application, setStatus
eeFac1, ee101roster, read
eeFac2, ee601gradebook, changeScore
registrar1, ee101roster, read
admissions2, application2, setStatus
eeStu3, ee601gradebook, readScore
admissions2, csStu2application, setStatus
registrar1, cs601roster, write
admissions2, csStu3application, read
csFac2, cs601gradebook, changeScore
csStu2, csStu2application, checkStatus
registrar1, cs602roster, read
registrar1, ee602roster, write
eeStu5, ee601gradebook, readMyScores
csFac2, cs601gradebook, assignGrade
registrar1, cs601roster, read
eeStu1, eeStu1trans, read
registrar1, ee601roster, read
registrar2, cs601roster, write
admissions2, application1, read
admissions2, application1, setStatus
admissions2, eeStu4application, setStatus
eeStu3, ee602gradebook, readMyScores
registrar2, ee101roster, read
csChair, csStu4trans, read
registrar2, csStu5trans, read
admissions1, csStu4application, read
applicant2, application2, checkStatus
eeStu2, eeStu2application, checkStatus
csStu5, cs602gradebook, readMyScores
admissions2, application2, read
registrar2, ee601roster, write
eeFac1, ee101gradebook, addScore
admissions1, csStu2application, setStatus
eeFac2, ee601gradebook, assignGrade
eeFac1, ee101gradebook, changeScore
csStu2, cs602gradebook, addScore
admissions1, eeStu5application, setStatus
csFac1, cs101gradebook, readScore
eeStu3, eeStu3trans, read
admissions1, csStu3application, read
registrar2, cs101roster, read
eeStu1, ee101gradebook, readMyScores
eeFac2, ee601gradebook, addScore
eeStu3, eeStu3application, checkStatus
csStu2, cs101gradebook, readScore
csFac2, cs601gradebook, addScore
admissions1, csStu4application, setStatus
admissions1, eeStu3application, read
csStu5, csStu5trans, read
csChair, csStu5trans, read
csStu1, cs101gradebook, readMyScores
admissions2, eeStu2application, setStatus
eeStu4, ee601gradebook, readMyScores
admissions1, eeStu5application, read
registrar2, ee602roster, write
registrar2, csStu2trans, read
csStu2, cs101gradebook, addScore
csStu1, csStu1trans, read

## ADDITIONAL_INSTRUCTIONS

        This section provides additional instructions to assist you output propper ABAC rules.

        This is also divided into sections, the following is a description on the sections. 
        Failure to adhere to any of these rules will result in a failed query on your (the LLM) part.

            OUTPUT_FORMAT section: The output section describes how to format your (the LLMs) response. Including syntax, restrictions, and content. 
            
            ABAC_RULES section, is section dedicated to helping you (the LLM) produce more consistent and correct abac rules. You (the LLM) are to follow these rules strictly.

            The LLM_IMPROVEMENT section, has other instructions to help you (the LLM) produce better results.



        OUTPUT_FORMAT:
            1. Only respond with the ABAC rules being requested.
            2. Each rule should follow strict syntax described in the RULES_FORMAT_DESCRIPTION section.
            3. Each rule should be in its own line.
                    verify for each line:
                    line.startswith("rule(") and line.endswith(")")
                    line.count(";") == 3                
            4. Respond only with plain text, no mark-up or other type of formatting. 
                a. unseen values are forbidden.
            9. DO NOT INCLUDE ANY ``` at the beginnig or end of a response
         


        ABAC_RULES:
            
            1. ABAC rules should avoid using uid and rid attributes. 
                a. Do not hard code any ids, the rules should be dynamic.
            2. The generated rules must as concise as possible.
                a. Check all ABAC rules for redundancy, keep rules to strict minimum. 
                b. Consider removing any conjuncts in subject condition, resource condition, and constraints if that does not affect the permission given by the rule.
            6. You (the LLM) are allowed to combine rules for actions if they should grant the same access. 
                a. For example: rule (; subj ] {math}; {read, write, createNote}; class=class )
            7. ABAC rules do not need to dictate permit or deny as a section.
                a. INCORRECT = rule (; subj ] {math}; {read}; class=class, PERMIT )
            8. DO NOT ADD, REMOVE, OR EDIT ATTRIBUTES.
            9. Do not use synonyms when describing actions, stick to the action on the ACL list ONLY.


     






